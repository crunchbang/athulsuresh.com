<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Core Dump</title>
    <link>//localhost:1313/</link>
    <description>Recent content on Core Dump</description>
    <generator>Hugo -- 0.141.0</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Nov 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Notes On Erlang</title>
      <link>//localhost:1313/posts/11-notes-erlang/</link>
      <pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/11-notes-erlang/</guid>
      <description>&lt;p&gt;Collection of unstructed notes that I accumulated while learning Erlang. This is a &lt;em&gt;work-in-progress&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;erlang programs are composed on communicating processing. Like modeling objects, processes should be modeled to fit the problem. This is called modeling concurrency.&lt;/li&gt;
&lt;li&gt;concurrency is about structure. parallelism is about execution.&lt;/li&gt;
&lt;li&gt;each expression must end with a &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;variables in erlang can only be bound once. Variables start with UPPERCASE letters. atoms begin with lowercase letters.&lt;/li&gt;
&lt;li&gt;processes evaluate fns that are defined in modules. Modules are files with &lt;code&gt;.erl&lt;/code&gt; extension.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pid ! {client_pid, message}&lt;/code&gt; for sending message to pid.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c(module_name)&lt;/code&gt; to compile the module. &lt;code&gt;f()&lt;/code&gt;  to forget the bindings.&lt;/li&gt;
&lt;li&gt;file server and client. client provides the abstraction and hides the details of communication with the actual process. This gives use the flexibility to change the underlying implementation without changing the interface exposed through the client. &lt;em&gt;It&amp;rsquo;s refreshing how Joe Armstrong doesn&amp;rsquo;t talk down to the programmer in this book. The innards and complicated lingua franca is exposed for everyone to see.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;erlang can handle arbitrary precision numbers. Like really big numbers.&lt;/li&gt;
&lt;li&gt;= is more of a pattern matching operator rather than assignment operator.&lt;/li&gt;
&lt;li&gt;atoms are similar to symbolic constants or enums. atoms are global. atoms can be quoted and can have spaces in them.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{item1, blah}&lt;/code&gt; represents a tuple of fixed size. Since tuples don&amp;rsquo;t have type, it&amp;rsquo;s a convention to add an atom as the first element indicating the type. &lt;code&gt;{point, 0, 1}&lt;/code&gt;. &lt;code&gt;{point, C, C} = {point, 25, 25}&lt;/code&gt; works!&lt;/li&gt;
&lt;li&gt;strings are represented as a list of integers with each int representing an unicode point.&lt;/li&gt;
&lt;li&gt;fullstop separates expression. comma separates related subordinate clauses. semicolon separates clauses.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fun(arg) -&amp;gt; body end.&lt;/code&gt; to define anonymous fns.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[f(X) || X &amp;lt;- L]&lt;/code&gt; list comprehension. &lt;code&gt;X &amp;lt;- L&lt;/code&gt; follows the pattern logic for =.&lt;/li&gt;
&lt;li&gt;Named function F/n should be passed in as &lt;code&gt;fun F/n&lt;/code&gt; when used as an argument&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-record(Name { field1 = DefaultValue1, .... fieldN }&lt;/code&gt;.  &lt;code&gt;undefined&lt;/code&gt; is the default value. &lt;code&gt;.hrl&lt;/code&gt; files are like C header files where common definitions can be kept. &lt;code&gt;#Name{key1=val1...}.&lt;/code&gt; to instantiate the struct. &lt;code&gt;rr(&amp;quot;record_file.hrl&amp;quot;)&lt;/code&gt; to bring it into the erl.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X#Name{field1=NewValue}&lt;/code&gt; to create a new record from an existing record X with a field value changed.&lt;/li&gt;
&lt;li&gt;Maps are weird. &lt;code&gt;#{ key Op val, key2 Op val2}&lt;/code&gt;. &lt;code&gt;:=&lt;/code&gt; for updating an existing key. =&amp;gt; for adding a new key. The update follows the same pattern as records.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt; is OR and &lt;code&gt;,&lt;/code&gt; is AND for guard sequences. maps : get/find etc for acessing map values.&lt;/li&gt;
&lt;li&gt;clauses of a fn need to be separated by a SEMICOLON instead of a PERIOD!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;&amp;quot;binaries&amp;quot;&amp;gt;&amp;gt;&lt;/code&gt;. Binary values must be in the range 0-255. Any other value would wrap around and be mapped to a value in the 0-255 range. term_to_binary and binary_to_term.&lt;/li&gt;
&lt;li&gt;a type is binary when it&amp;rsquo;s size is divisible by 8, otherwise it&amp;rsquo;s a bitstring.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&amp;lt;R:5, B:6, G:5&amp;gt;&amp;gt;&lt;/code&gt; to pack elements into a binary while specifying the bit size. The same pattern HAS to be used when unpacking.&lt;/li&gt;
&lt;li&gt;type test BIFs are allowed in guard clauses. &lt;code&gt;is_xxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;self()&lt;/code&gt; to get the PID of the current process. Sending the current process&amp;rsquo;s PID in the message is a convention that allows the receiver to know whom to reply to.&lt;/li&gt;
&lt;li&gt;Storing state of the function on the stack i.e on function parameters&lt;/li&gt;
&lt;li&gt;Modules have functions and attributes. attrs start with &lt;code&gt;-&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-define(MACRO, val)&lt;/code&gt; would be used as &lt;code&gt;?MACRO&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;receive..after..end&lt;/code&gt; to specify timeouts. Sounds similar to Go timer ticks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spawn(Module, Fn, Arg)&lt;/code&gt; to spawn a new process that executes Fn. Args is a list of args that will be passed to Fn. Arg will &lt;strong&gt;always&lt;/strong&gt; be a list.&lt;/li&gt;
&lt;li&gt;with a full mail box, the messages are tried in order. If a msg doesn&amp;rsquo;t match any of the patterns, then it is put on the save q and the next message is tried. If it matches, then the messages from the save q is put back on top of the mailbox. This is called selective receive. nest another receive in a fn within the &lt;code&gt;after 0&lt;/code&gt; block to do selective receive.&lt;/li&gt;
&lt;li&gt;messages that do not match a pattern are never lost. They&amp;rsquo;re always around. The downside is this could lead to mailbox pollution if the proc doesn&amp;rsquo;t have the patterns to receive the msg.&lt;/li&gt;
&lt;li&gt;In a defensive programming style, the &lt;code&gt;Unexpected&lt;/code&gt; match is used as a catchall to prevent mailbox pollution.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link(pid)&lt;/code&gt; links the current process with pid. &lt;code&gt;unlink(pid)&lt;/code&gt;. When one of the linked processes crashes, the other crashes (exits?) too. Links are bidirectional.&lt;/li&gt;
&lt;li&gt;Since link(spawn(..)) is a multistep op, there could be a case where the process dies before it is spawned. This can cause undefined behaviour. In order to avoid this spawn_link(..) can be used which works in an atomic way.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exit(blah)&lt;/code&gt; gets propagated as a special message (&amp;ldquo;signal&amp;rdquo;) which cannot be caught using normal receive. It can be caught if &lt;code&gt;process_flag(trap_exit, true)&lt;/code&gt; is set. Then &lt;code&gt;{&#39;EXIT&#39;, Pid, msg}&lt;/code&gt; can be caught.&lt;/li&gt;
&lt;li&gt;monitors are like links, but they&amp;rsquo;re unidirectional and can be stacked. &lt;code&gt;erlang:monitor(process, spawn(...))&lt;/code&gt;. spawn_monitor is the atomic alternative.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exit(Pid, reason)&lt;/code&gt; to kill another process.&lt;/li&gt;
&lt;li&gt;Each process can be registered against a name which can then be used for sending messages instead of Pid. &lt;code&gt;register(name, pid)&lt;/code&gt;. &lt;code&gt;unregister(name)&lt;/code&gt;. &lt;code&gt;registered() / regs()&lt;/code&gt; to get info about the registered processes. A process can have only name and a name can only be registered once. &lt;code&gt;whereis(registered_name)&lt;/code&gt; to get the pid associated with it. This can be used in patterns to ensure that the reply is indeed from the process we expect.&lt;/li&gt;
&lt;li&gt;Another pattern is to send a ref to the proc and expect it back in the reply. This prevents us from expecting a reply from a specific Pid and shields us against scenarios where the process gets restarted. &lt;code&gt;make_ref()&lt;/code&gt;. Refs are used when we expect a message from a certain source. In cases, we expect a message (ex: notification) and don&amp;rsquo;t care about the source, then the ref can be omitted.&lt;/li&gt;
&lt;li&gt;If a monitor is set for a process that&amp;rsquo;s already down using &lt;code&gt;erlang:monitor(process, PID)&lt;/code&gt; then we receive a &lt;code&gt;{&#39;DOWN&#39;, MonitorRef, process, PID, &amp;lt;reason&amp;gt;}&lt;/code&gt; message as the reply.&lt;/li&gt;
&lt;li&gt;A pattern that I&amp;rsquo;ve seen is that the proc file contains method that can be used for invoking all the messages that the proc expects.&lt;/li&gt;
&lt;li&gt;Calls that require reply follow the pattern &lt;code&gt;{Pid, Ref, Msg}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Walking on water and developing software from a specification are easy if both are frozen.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Faster Multitasking with Hammerspoon</title>
      <link>//localhost:1313/posts/10-multitasking-hammerspoon/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/10-multitasking-hammerspoon/</guid>
      <description>&lt;p&gt;When I&amp;rsquo;m working, I usually have at-least 4 windows open including Slack, Chrome, iTerm and a few other stuff. Lately, I&amp;rsquo;ve noticed that switching between them via &lt;code&gt;cmd+tab&lt;/code&gt; is turning out to be a waste of time, since the order of the apps keep changing based on how recently they were used.&lt;/p&gt;
&lt;p&gt;I wanted a smoother transition between my umpteen apps without getting stuck in &lt;code&gt;cmd+tab&lt;/code&gt; hell.&lt;/p&gt;
&lt;p&gt;I needed static key-bindings!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sneaky Defers In Go</title>
      <link>//localhost:1313/posts/09-sneaky-defers-in-go/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/09-sneaky-defers-in-go/</guid>
      <description>&lt;p&gt;What do you think the output of the following code would be?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;TestDefer&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TestDefer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given how &lt;code&gt;defer&lt;/code&gt;-ed functions are executed just before the parent function exits, I expected the output to be&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;world
world
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But, on execution it actually prints&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;world
hello
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is because the arguments are evaluated when the defer is encountered, and not when the deferred function is actually called. Effective Go even has a line &lt;a href=&#34;https://golang.org/doc/effective_go#defer&#34;&gt;specifically about this behavior&lt;/a&gt; (which I discovered later).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writer&#39;s Block</title>
      <link>//localhost:1313/posts/08-writers-block/</link>
      <pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/08-writers-block/</guid>
      <description>&lt;p&gt;A while back, I came across &lt;a href=&#34;https://dev.to/jbranchaud/how-i-built-a-learning-machine-45k9&#34;&gt;this article&lt;/a&gt; by Josh Branchaud where he talked about TIL posts and learning in public (among many other things). This really appealed to me. Over the years, I had accumulated immense amount of information from posts and articles that people had put out and the whole idea of paying it forward by putting out things that I&amp;rsquo;d learned along the way sounded interesting.&lt;/p&gt;
&lt;p&gt;The primary impediment I faced here was the amount of time it took to create a well-crafted post. Most of the longer pieces here were summaries of months of effort squeezed into a single page post with pictures. Those were few and far apart.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Back After A Hiatus</title>
      <link>//localhost:1313/posts/07-back-after-hiatus/</link>
      <pubDate>Thu, 03 Jun 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/07-back-after-hiatus/</guid>
      <description>&lt;p&gt;I realized that I hadn&amp;rsquo;t touched my blog in over a year. A lot had happened since then, but I hadn&amp;rsquo;t taken the time to note anything down. Looking through my old posts, I remember how good it felt to actually sit and write things down.&lt;/p&gt;
&lt;p&gt;I thought I&amp;rsquo;d change the theme and tweak things a bit just for the sake of it. Lo and behold, I ended up spending an entire day trying out themes and tweaking knobs and controls to see how things looked. Sometimes, I feel like I waste a lot of time on preliminary aspects of a task.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Un-implementable Interfaces In Go</title>
      <link>//localhost:1313/posts/06-unimplementable-interfaces-go/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/06-unimplementable-interfaces-go/</guid>
      <description>&lt;p&gt;Recently, I started randomly going through the Go standard library, mostly to satiate my curiosity and to find out what goes on behind the curtains. While checking out the testing package, I found this interesting little snippet of code in &lt;code&gt;src/testing/testing.go&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// TB is the interface common to T and B.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TB&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Cleanup&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Fail&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;FailNow&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Failed&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Helper&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Logf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Skip&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;SkipNow&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Skipf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Skipped&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;TempDir&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// A private method to prevent users implementing the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// interface and so future additions to it will not&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// violate Go 1 compatibility.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;private&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This seems pretty evident once you see it. It makes sense for the Go standard library where the private function enables them to circumvent the compatibility promise by ensuring that no one would be able to use this interface outside of the standard library because of the private function. This gives them the flexibility to add functionality later without breaking anything.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Tale Of Two DBs</title>
      <link>//localhost:1313/posts/05-tale-of-two-dbs/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/05-tale-of-two-dbs/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;Work always manages to throw interesting problems my way and this one was particularly interesting. Our telephone server infrastructure and the associated cloud services were spread across two AWS regions - Singapore &amp;amp; Mumbai. This was primarily done to comply with Indian Data Protection Laws which mandated that customer data associated with some critical areas of business must stay within the country. We had run these two regions as independent entities, with code changes being deployed uniformly across them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notes from &#39;Linux Kernel Development&#39;</title>
      <link>//localhost:1313/posts/04-notes-linux-dev/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/04-notes-linux-dev/</guid>
      <description>&lt;p&gt;This book had been on my TO-READ list for a long time. It came up again while I was perusing &lt;a href=&#34;https://danluu.com/programming-books/&#34;&gt;Dan Luu&amp;rsquo;s Programming book list&lt;/a&gt;. I&amp;rsquo;ve always wanted to look behind the curtains and see how the magic worked, so I finally bought it.&lt;/p&gt;
&lt;p&gt;I used &lt;a href=&#34;https://elixir.bootlin.com/linux/v5.7.2/C/ident/task_struct&#34;&gt;bootlin&lt;/a&gt; to read through Linux 5.7.2 source. They provide a really good search system and linked definitions. The book describes kernel version 2.6. You might want to keep this site open to see how things have changed since then.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wrong Tool For The Job: Concurrent Queues with Aerospike</title>
      <link>//localhost:1313/posts/03-wrong-tool/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/03-wrong-tool/</guid>
      <description>&lt;h2 id=&#34;if-all-you-have-is-a-hammer-dot-dot-dot&#34;&gt;If all you have is a hammer&amp;hellip;&lt;/h2&gt;
&lt;p&gt;Organizational choices and system architecture sometimes forces you to use sub-optimal tools for a problem. In fact, this is part of the challenge that work throws at you - having to retrofit or abuse tools to get the job done.&lt;/p&gt;
&lt;p&gt;If you always had the right set of tools, what fun would life be? This is one such problem.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;We had an antiquated use case which allowed customers to create a deferred list of jobs. These jobs would then be processed based on API requests from the customer&amp;rsquo;s end. These lists would usually range from about 100 - 100000 jobs. We also provided a provision whereby the customer could trigger multiple requests in parallel to enable concurrent processing of these jobs. The original design dumped these jobs into MySQL, given that these jobs had to be persisted indefinitely until a trigger was detected.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bug Story: It&#39;s not you, it&#39;s the environment</title>
      <link>//localhost:1313/posts/02-bug-ttl/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/02-bug-ttl/</guid>
      <description>&lt;p&gt;It all started with a deployment to the production cluster.&lt;/p&gt;
&lt;p&gt;It always does. The worst things happen when you deploy to prod.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;In our production cluster, we use Aerospike as the primary data store, with data being synced to MySQL for long term storage. For the uninitiated, Aerospike is a high speed, distributed key-value NoSQL database which provides a lot of cool features. Check it &lt;a href=&#34;https://www.aerospike.com/&#34;&gt;out&lt;/a&gt; if you haven&amp;rsquo;t already. In our cluster, all transactional data gets written to or read from AS, with MySQL being used only as a fallback option. We have a dedicated service that sync data from AS to MySQL and keeps things in check. The speed of access and the ability to scale by adding new nodes helps us keep the pressure off our central MySQL datastore.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hello World</title>
      <link>//localhost:1313/posts/01-hello-world/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/01-hello-world/</guid>
      <description>&lt;p&gt;Hello!&lt;/p&gt;
&lt;p&gt;Is there anybody out there?&lt;/p&gt;
&lt;p&gt;Nod if you can hear me&lt;/p&gt;
&lt;p&gt;This blog is my poor attempt to document all the werid bugs I have encountered in production and the valuable lessons they&amp;rsquo;ve taught me.&lt;/p&gt;
&lt;p&gt;It took me 5 attempts just to get this page up and running. Hmm. There must be story here that I can stretch to a blog post.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
